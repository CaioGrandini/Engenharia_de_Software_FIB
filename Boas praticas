Git, GitFlow e GitLab

Git
- permite a criacao do brench.
    BRENCH: e um snapshot da ultima versao do codigo.
            assim podemos mexer, codar, mudar a versao, sem mexer na brench static.
            Com isso conseguimos alterar o codigo sem afetar os outros desenvolvedores.
            Ou seja, os demais desenvolvedores irao olhar o fonte principal e nao o brench.
            Os fontes serao alterados da forma desejada e quem desejar fazer uma alteracao em paralelo, 
            tera o fonte original sem nenhuma alteracao, evitando que tenha problemas de compilacao enquanto
            existem desenvolvedores trabalhando.

GitHub
- e um servico web que oferece diversas funcionalidades extas aplicadas ao git, incluindo hospedar seus projetos pessoais.

comandos Git:
    4 comandos iniciais do git sao:
            - git add <nome do arquivo> -> permite que os arquivos entrem na area de index do git para futuras revisoes.
            - git commit -m "comentario" -> coleta todos os arquivos do index e elege o mesmo para futuras revisoes.
            - git push -> empurra todos os seus commits para o github.
            - git status -> mostra o status atual do repositorio.

Outros comandos:
    GIT PULL:
    Usado para receber as alteracoes do MEU PROJETO.
            - git pull -> usado para trazer todas as modificacoes que estao no github para o seu projeto local. Isso e vital
            quando existem projetos mantidos por mais de uma pessoa, ou se voce possui duas maquinas e precisa manter a sincornia entre elas.
            Com o git pull, se houverem alteracoes enquanto nao estou trabalhando no codigo, eu consigo trazer todas as informacoes que foram mexidas
            enquando ausente.

Atividade:
Realizando um Git PULL no repositorio do vizinho.
    Friend Project:
            - git clone Http://clone.
            - alterar um arquivo.
            - git add <nome do arquivo>
            - git commit -m "comentario"
            - git push

    My Project:
            - git push.


Branchs:
E usada para criarmos um novo ambiente com o codigo.
Com isso, nos conseguimos mexer no codigo, programar, fazer as validacoes, homologar sem parar o ambiente de producao.
Apos com tudo homologado, nos podemos subir na master.

No github temos o compare, com ele nós conseguimos comparar o que foi alterado na branch teste para a main.

Pull Request -> requisicao para mudar o fonte, envia uma notificação para as demais desenvolvedoras (responsaveis)
para fazer o merge do código.

Fork -> Quando voce não tem permissão para clonar o arquivo do repositorio do amigo, então voce cria um FORK, 
ele vai clonar para o SEU GITHUB e ai sim voce consegue clonar.
quando visualiza a ramificacao no projeto (As branchs).

Merge.
E quando nos juntamos o codigo que foi alterado, e juntamos com a branch master (main)
Podemos fazer isso utilizando PULL REQUEST.
Podemos realizar diretamente no GitHub ou no CLI DO GIT BASH.
                - para realizar diretamente no CLI precisa seguir os comandos:
                        - entramos na branch MAIN e executamos:
                                -git merge (nome da branch secundária)
                O merge é referente a BRANCH que voce quer puxar

Clone -> clona o projeto, copia e faz o clone para a maquina.

Existem ferramentas de terceiros para versionar para o git de maneira mais facil como: TortoiseGIT

GIT FLOW
Existem 2 formas de implementar o gitflow:
        1 - utilizando os comandos basicos do Git.
        2 - utilizando uma cli que ajuda a simplificar o fluxo do Git Flow

Teoria dos gargalos.

integração continua:
Os desenvolvedores fazem o push no repositorio 

Entrega continua:
A entrega continua  concentra-se em uma perspectiva mais holistica do desenvolvimento de software.
        - Automacao de testes.
        - Automacao do processo de implementacao
        - infra-estrutura como codigo.
        - feedback rápido e automatizado sobre alteracões em produções.
        - estado implantavel a qualquer momento de qualquer versao, com apenas um clique de botao.


Implantacao continua:
É o estado que um processo de desenvolvimmento dde software alcança quando todas as alteracoes passam
pelo pipeline de implantacao (deployment pipeline) e sao adicionados automaticamente em producao.

Pipeline de implantacao:
É uma automatizacao do processo de enviar o software do versionador de fontes até a producao.






